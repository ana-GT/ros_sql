#!/usr/bin/env python
import argparse
import sys, time
import Queue
import sqlalchemy
import numpy as np

import roslib
roslib.load_manifest('ros_sql')
import rospy
import rosbag
import ros_sql.session
import ros_sql.models as models
import ros_sql.ros2sql as ros2sql
import ros_sql.factories as factories
import ros_sql.util as util
import rostopic

class BagToSQL:
    def __init__(self,bag_fname,bind_url_cli,prefix=None):
        node_name_base = 'bag_to_sql' # no need to be a real node, though
        self.prefix=prefix

        bind_url = util.get_bind_url( node_name_base, bind_url_cli )
        engine = sqlalchemy.create_engine(bind_url)
        rospy.loginfo('saving to %r'%bind_url)

        self.metadata = sqlalchemy.MetaData(bind=engine)
        self.session = ros_sql.session.get_session(self.metadata)

        self.bag = rosbag.Bag(bag_fname,mode='r')
    def run(self):
        topic2msg_class = {}

        count = 0
        for topic, msg, t in self.bag.read_messages():#topics=topics):
            print 'count %d: %r'%(count,topic)
            count += 1
            if topic not in topic2msg_class:
                print 'now schema for topic',topic
                msg_class = msg.__class__
                ros2sql.add_schemas(self.session, self.metadata,
                                    [(topic,msg_class)],
                                    prefix=self.prefix)
                topic2msg_class[topic] = msg_class

            if 0:
                continue
            factories.msg2sql(self.session, self.metadata,
                              topic,
                              msg,
                              timestamp=t,
                              prefix=self.prefix,
                              )

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('filename',type=str,
                        help='filename of bag file')
    parser.add_argument('-b','--bind',type=str,
                        help='sqlalchemy URL for database connection')
    parser.add_argument('-p','--prefix',type=str,
                        help='prefix to add to table names')

    # use argparse, but only after ROS did its thing
    argv = rospy.myargv()
    args = parser.parse_args(argv[1:])

    k = BagToSQL(args.filename, args.bind, prefix=args.prefix)
    k.run()

if __name__=='__main__':
    main()
